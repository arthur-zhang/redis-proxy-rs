/**
 * warning: This file was generated by build_redis_cmd.rs
 * do not modify it manually!
 */
use std::collections::HashMap;

use lazy_static::lazy_static;

use crate::command::{RedisCmdDescribeEntity, KeySpecs, BeginSearch, FindKeys, Index, Keyword, Range, KeyNum};

lazy_static! {
    /**
     * Redis command's name(or prefix) and whether it is a multi-part command
     */
    pub static ref MULTIPART_COMMANDS: HashMap<String, bool> = HashMap::from([
        (String::from("ACL"), true),
        (String::from("LATENCY"), true),
        (String::from("XGROUP"), true),
        (String::from("SENTINEL"), true),
        (String::from("PUBSUB"), true),
        (String::from("CLIENT"), true),
        (String::from("CONFIG"), true),
        (String::from("XINFO"), true),
        (String::from("CLUSTER"), true),
        (String::from("SCRIPT"), true),
        (String::from("OBJECT"), true),
        (String::from("COMMAND"), true),
        (String::from("SLOWLOG"), true),
        (String::from("FUNCTION"), true),
        (String::from("MEMORY"), true),
        (String::from("MODULE"), true),
    ]);

    /**
     * Redis command's full name and its description
     */
    pub static ref COMMANDS_INFO: HashMap<String, RedisCmdDescribeEntity> = HashMap::from([
        (String::from("ACL"), RedisCmdDescribeEntity {
            summary: String::from("A container for Access List Control commands."),
            container: None,
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: -2,
            function: None,
            command_flags: Some(vec![String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL CAT"), RedisCmdDescribeEntity {
            summary: String::from("Lists the ACL categories, or the commands inside a category."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: -2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL DELUSER"), RedisCmdDescribeEntity {
            summary: String::from("Deletes ACL users, and terminates their connections."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: -3,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL DRYRUN"), RedisCmdDescribeEntity {
            summary: String::from("Simulates the execution of a command by a user, without executing the command."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("7.0.0"),
            arity: -4,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL GENPASS"), RedisCmdDescribeEntity {
            summary: String::from("Generates a pseudorandom, secure password that can be used to identify ACL users."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: -2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL GETUSER"), RedisCmdDescribeEntity {
            summary: String::from("Lists the ACL rules of a user."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: 3,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: 2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL LIST"), RedisCmdDescribeEntity {
            summary: String::from("Dumps the effective rules in ACL file format."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: 2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL LOAD"), RedisCmdDescribeEntity {
            summary: String::from("Reloads the rules from the configured ACL file."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: 2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL LOG"), RedisCmdDescribeEntity {
            summary: String::from("Lists recent security events generated due to ACL rules."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: -2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL SAVE"), RedisCmdDescribeEntity {
            summary: String::from("Saves the effective ACL rules in the configured ACL file."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: 2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL SETUSER"), RedisCmdDescribeEntity {
            summary: String::from("Creates and modifies an ACL user and its rules."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: -3,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL USERS"), RedisCmdDescribeEntity {
            summary: String::from("Lists all ACL users."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: 2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("ACL WHOAMI"), RedisCmdDescribeEntity {
            summary: String::from("Returns the authenticated username of the current connection."),
            container: Some(String::from("ACL")),
            group: String::from("server"),
            since: String::from("6.0.0"),
            arity: 2,
            function: Some(String::from("aclCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("APPEND"), RedisCmdDescribeEntity {
            summary: String::from("Appends a string to the value of a key. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("2.0.0"),
            arity: 3,
            function: Some(String::from("appendCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ASKING"), RedisCmdDescribeEntity {
            summary: String::from("Signals that a cluster client is following an -ASK redirect."),
            container: None,
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 1,
            function: Some(String::from("askingCommand")),
            command_flags: Some(vec![String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("AUTH"), RedisCmdDescribeEntity {
            summary: String::from("Authenticates the connection."),
            container: None,
            group: String::from("connection"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("authCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("NO_AUTH"),String::from("SENTINEL"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("BGREWRITEAOF"), RedisCmdDescribeEntity {
            summary: String::from("Asynchronously rewrites the append-only file to disk."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: 1,
            function: Some(String::from("bgrewriteaofCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("BGSAVE"), RedisCmdDescribeEntity {
            summary: String::from("Asynchronously saves the database(s) to disk."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: -1,
            function: Some(String::from("bgsaveCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("BITCOUNT"), RedisCmdDescribeEntity {
            summary: String::from("Counts the number of set bits (population counting) in a string."),
            container: None,
            group: String::from("bitmap"),
            since: String::from("2.6.0"),
            arity: -2,
            function: Some(String::from("bitcountCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BITFIELD"), RedisCmdDescribeEntity {
            summary: String::from("Performs arbitrary bitfield integer operations on strings."),
            container: None,
            group: String::from("bitmap"),
            since: String::from("3.2.0"),
            arity: -2,
            function: Some(String::from("bitfieldCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),String::from("ACCESS"),String::from("VARIABLE_FLAGS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BITFIELD_RO"), RedisCmdDescribeEntity {
            summary: String::from("Performs arbitrary read-only bitfield integer operations on strings."),
            container: None,
            group: String::from("bitmap"),
            since: String::from("6.0.0"),
            arity: -2,
            function: Some(String::from("bitfieldroCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BITOP"), RedisCmdDescribeEntity {
            summary: String::from("Performs bitwise operations on multiple strings, and stores the result."),
            container: None,
            group: String::from("bitmap"),
            since: String::from("2.6.0"),
            arity: -4,
            function: Some(String::from("bitopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 3}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BITPOS"), RedisCmdDescribeEntity {
            summary: String::from("Finds the first set (1) or clear (0) bit in a string."),
            container: None,
            group: String::from("bitmap"),
            since: String::from("2.8.7"),
            arity: -3,
            function: Some(String::from("bitposCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BLMOVE"), RedisCmdDescribeEntity {
            summary: String::from("Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved."),
            container: None,
            group: String::from("list"),
            since: String::from("6.2.0"),
            arity: 6,
            function: Some(String::from("blmoveCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BLMPOP"), RedisCmdDescribeEntity {
            summary: String::from("Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("7.0.0"),
            arity: -5,
            function: Some(String::from("blmpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("BLPOP"), RedisCmdDescribeEntity {
            summary: String::from("Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("2.0.0"),
            arity: -3,
            function: Some(String::from("blpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -2, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BRPOP"), RedisCmdDescribeEntity {
            summary: String::from("Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("2.0.0"),
            arity: -3,
            function: Some(String::from("brpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -2, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BRPOPLPUSH"), RedisCmdDescribeEntity {
            summary: String::from("Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("2.2.0"),
            arity: 4,
            function: Some(String::from("brpoplpushCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BZMPOP"), RedisCmdDescribeEntity {
            summary: String::from("Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("7.0.0"),
            arity: -5,
            function: Some(String::from("bzmpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("BZPOPMAX"), RedisCmdDescribeEntity {
            summary: String::from("Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("5.0.0"),
            arity: -3,
            function: Some(String::from("bzpopmaxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -2, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("BZPOPMIN"), RedisCmdDescribeEntity {
            summary: String::from("Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("5.0.0"),
            arity: -3,
            function: Some(String::from("bzpopminCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -2, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("CLIENT"), RedisCmdDescribeEntity {
            summary: String::from("A container for client connection commands."),
            container: None,
            group: String::from("connection"),
            since: String::from("2.4.0"),
            arity: -2,
            function: None,
            command_flags: Some(vec![String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT CACHING"), RedisCmdDescribeEntity {
            summary: String::from("Instructs the server whether to track the keys in the next request."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("6.0.0"),
            arity: 3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT GETNAME"), RedisCmdDescribeEntity {
            summary: String::from("Returns the name of the connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("2.6.9"),
            arity: 2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT GETREDIR"), RedisCmdDescribeEntity {
            summary: String::from("Returns the client ID to which the connection's tracking notifications are redirected."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("6.0.0"),
            arity: 2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT ID"), RedisCmdDescribeEntity {
            summary: String::from("Returns the unique client ID of the connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT INFO"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about the connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT KILL"), RedisCmdDescribeEntity {
            summary: String::from("Terminates open connections."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("2.4.0"),
            arity: -3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT LIST"), RedisCmdDescribeEntity {
            summary: String::from("Lists open connections."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("2.4.0"),
            arity: -2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT NO-EVICT"), RedisCmdDescribeEntity {
            summary: String::from("Sets the client eviction mode of the connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("7.0.0"),
            arity: 3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT NO-TOUCH"), RedisCmdDescribeEntity {
            summary: String::from("Controls whether commands sent by the client affect the LRU/LFU of accessed keys."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("7.2.0"),
            arity: 3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLIENT PAUSE"), RedisCmdDescribeEntity {
            summary: String::from("Suspends commands processing."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("3.0.0"),
            arity: -3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT REPLY"), RedisCmdDescribeEntity {
            summary: String::from("Instructs the server whether to reply to commands."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("3.2.0"),
            arity: 3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT SETINFO"), RedisCmdDescribeEntity {
            summary: String::from("Sets information specific to the client or connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("7.2.0"),
            arity: 4,
            function: Some(String::from("clientSetinfoCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT SETNAME"), RedisCmdDescribeEntity {
            summary: String::from("Sets the connection name."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("2.6.9"),
            arity: 3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT TRACKING"), RedisCmdDescribeEntity {
            summary: String::from("Controls server-assisted client-side caching for the connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("6.0.0"),
            arity: -3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT TRACKINGINFO"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about server-assisted client-side caching for the connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT UNBLOCK"), RedisCmdDescribeEntity {
            summary: String::from("Unblocks a client blocked by a blocking command from a different connection."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("5.0.0"),
            arity: -3,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLIENT UNPAUSE"), RedisCmdDescribeEntity {
            summary: String::from("Resumes processing commands from paused clients."),
            container: Some(String::from("CLIENT")),
            group: String::from("connection"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("clientCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER"), RedisCmdDescribeEntity {
            summary: String::from("A container for Redis Cluster commands."),
            container: None,
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("CLUSTER ADDSLOTS"), RedisCmdDescribeEntity {
            summary: String::from("Assigns new hash slots to a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: -3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER ADDSLOTSRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Assigns new hash slot ranges to a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("7.0.0"),
            arity: -4,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER BUMPEPOCH"), RedisCmdDescribeEntity {
            summary: String::from("Advances the cluster config epoch."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER COUNT-FAILURE-REPORTS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of active failure reports active for a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER COUNTKEYSINSLOT"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of keys in a hash slot."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER DELSLOTS"), RedisCmdDescribeEntity {
            summary: String::from("Sets hash slots as unbound for a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: -3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER DELSLOTSRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Sets hash slot ranges as unbound for a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("7.0.0"),
            arity: -4,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER FAILOVER"), RedisCmdDescribeEntity {
            summary: String::from("Forces a replica to perform a manual failover of its master."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: -2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER FLUSHSLOTS"), RedisCmdDescribeEntity {
            summary: String::from("Deletes all slots information from a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER FORGET"), RedisCmdDescribeEntity {
            summary: String::from("Removes a node from the nodes table."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER GETKEYSINSLOT"), RedisCmdDescribeEntity {
            summary: String::from("Returns the key names in a hash slot."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 4,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER INFO"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about the state of a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER KEYSLOT"), RedisCmdDescribeEntity {
            summary: String::from("Returns the hash slot for a key."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER LINKS"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of all TCP links to and from peer nodes."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER MEET"), RedisCmdDescribeEntity {
            summary: String::from("Forces a node to handshake with another node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: -4,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER MYID"), RedisCmdDescribeEntity {
            summary: String::from("Returns the ID of a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER MYSHARDID"), RedisCmdDescribeEntity {
            summary: String::from("Returns the shard ID of a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("7.2.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER NODES"), RedisCmdDescribeEntity {
            summary: String::from("Returns the cluster configuration for a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER REPLICAS"), RedisCmdDescribeEntity {
            summary: String::from("Lists the replica nodes of a master node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("5.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER REPLICATE"), RedisCmdDescribeEntity {
            summary: String::from("Configure a node as replica of a master node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER RESET"), RedisCmdDescribeEntity {
            summary: String::from("Resets a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: -2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("STALE"),String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER SAVECONFIG"), RedisCmdDescribeEntity {
            summary: String::from("Forces a node to save the cluster configuration to disk."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER SET-CONFIG-EPOCH"), RedisCmdDescribeEntity {
            summary: String::from("Sets the configuration epoch for a new node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER SETSLOT"), RedisCmdDescribeEntity {
            summary: String::from("Binds a hash slot to a node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: -4,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER SHARDS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the mapping of cluster slots to shards."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER SLAVES"), RedisCmdDescribeEntity {
            summary: String::from("Lists the replica nodes of a master node."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CLUSTER SLOTS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the mapping of cluster slots to nodes."),
            container: Some(String::from("CLUSTER")),
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 2,
            function: Some(String::from("clusterCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("COMMAND"), RedisCmdDescribeEntity {
            summary: String::from("Returns detailed information about all commands."),
            container: None,
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: -1,
            function: Some(String::from("commandCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("COMMAND COUNT"), RedisCmdDescribeEntity {
            summary: String::from("Returns a count of commands."),
            container: Some(String::from("COMMAND")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: 2,
            function: Some(String::from("commandCountCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("COMMAND DOCS"), RedisCmdDescribeEntity {
            summary: String::from("Returns documentary information about one, multiple or all commands."),
            container: Some(String::from("COMMAND")),
            group: String::from("server"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("commandDocsCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("COMMAND GETKEYS"), RedisCmdDescribeEntity {
            summary: String::from("Extracts the key names from an arbitrary command."),
            container: Some(String::from("COMMAND")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: -3,
            function: Some(String::from("commandGetKeysCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("COMMAND GETKEYSANDFLAGS"), RedisCmdDescribeEntity {
            summary: String::from("Extracts the key names and access flags for an arbitrary command."),
            container: Some(String::from("COMMAND")),
            group: String::from("server"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("commandGetKeysAndFlagsCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("COMMAND HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("COMMAND")),
            group: String::from("server"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("commandHelpCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("COMMAND INFO"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about one, multiple or all commands."),
            container: Some(String::from("COMMAND")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: -2,
            function: Some(String::from("commandInfoCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("COMMAND LIST"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of command names."),
            container: Some(String::from("COMMAND")),
            group: String::from("server"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("commandListCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("CONFIG"), RedisCmdDescribeEntity {
            summary: String::from("A container for server configuration commands."),
            container: None,
            group: String::from("server"),
            since: String::from("2.0.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("CONFIG GET"), RedisCmdDescribeEntity {
            summary: String::from("Returns the effective values of configuration parameters."),
            container: Some(String::from("CONFIG")),
            group: String::from("server"),
            since: String::from("2.0.0"),
            arity: -3,
            function: Some(String::from("configGetCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CONFIG HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("CONFIG")),
            group: String::from("server"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("configHelpCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CONFIG RESETSTAT"), RedisCmdDescribeEntity {
            summary: String::from("Resets the server's statistics."),
            container: Some(String::from("CONFIG")),
            group: String::from("server"),
            since: String::from("2.0.0"),
            arity: 2,
            function: Some(String::from("configResetStatCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CONFIG REWRITE"), RedisCmdDescribeEntity {
            summary: String::from("Persists the effective configuration to file."),
            container: Some(String::from("CONFIG")),
            group: String::from("server"),
            since: String::from("2.8.0"),
            arity: 2,
            function: Some(String::from("configRewriteCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("CONFIG SET"), RedisCmdDescribeEntity {
            summary: String::from("Sets configuration parameters in-flight."),
            container: Some(String::from("CONFIG")),
            group: String::from("server"),
            since: String::from("2.0.0"),
            arity: -4,
            function: Some(String::from("configSetCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("COPY"), RedisCmdDescribeEntity {
            summary: String::from("Copies the value of a key to a new key."),
            container: None,
            group: String::from("generic"),
            since: String::from("6.2.0"),
            arity: -3,
            function: Some(String::from("copyCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("DBSIZE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of keys in the database."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: 1,
            function: Some(String::from("dbsizeCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("DEBUG"), RedisCmdDescribeEntity {
            summary: String::from("A container for debugging commands."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("debugCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("PROTECTED"),]),
            key_specs: None,
        }),
        (String::from("DECR"), RedisCmdDescribeEntity {
            summary: String::from("Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("decrCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("DECRBY"), RedisCmdDescribeEntity {
            summary: String::from("Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("decrbyCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("DEL"), RedisCmdDescribeEntity {
            summary: String::from("Deletes one or more keys."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("delCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RM"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("DISCARD"), RedisCmdDescribeEntity {
            summary: String::from("Discards a transaction."),
            container: None,
            group: String::from("transactions"),
            since: String::from("2.0.0"),
            arity: 1,
            function: Some(String::from("discardCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("DUMP"), RedisCmdDescribeEntity {
            summary: String::from("Returns a serialized representation of the value stored at a key."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.6.0"),
            arity: 2,
            function: Some(String::from("dumpCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ECHO"), RedisCmdDescribeEntity {
            summary: String::from("Returns the given string."),
            container: None,
            group: String::from("connection"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("echoCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("EVAL"), RedisCmdDescribeEntity {
            summary: String::from("Executes a server-side Lua script."),
            container: None,
            group: String::from("scripting"),
            since: String::from("2.6.0"),
            arity: -3,
            function: Some(String::from("evalCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("SKIP_MONITOR"),String::from("MAY_REPLICATE"),String::from("NO_MANDATORY_KEYS"),String::from("STALE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("EVALSHA"), RedisCmdDescribeEntity {
            summary: String::from("Executes a server-side Lua script by SHA1 digest."),
            container: None,
            group: String::from("scripting"),
            since: String::from("2.6.0"),
            arity: -3,
            function: Some(String::from("evalShaCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("SKIP_MONITOR"),String::from("MAY_REPLICATE"),String::from("NO_MANDATORY_KEYS"),String::from("STALE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("EVALSHA_RO"), RedisCmdDescribeEntity {
            summary: String::from("Executes a read-only server-side Lua script by SHA1 digest."),
            container: None,
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("evalShaRoCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("SKIP_MONITOR"),String::from("NO_MANDATORY_KEYS"),String::from("STALE"),String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("EVAL_RO"), RedisCmdDescribeEntity {
            summary: String::from("Executes a read-only server-side Lua script."),
            container: None,
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("evalRoCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("SKIP_MONITOR"),String::from("NO_MANDATORY_KEYS"),String::from("STALE"),String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("EXEC"), RedisCmdDescribeEntity {
            summary: String::from("Executes all commands in a transaction."),
            container: None,
            group: String::from("transactions"),
            since: String::from("1.2.0"),
            arity: 1,
            function: Some(String::from("execCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SKIP_SLOWLOG"),]),
            key_specs: None,
        }),
        (String::from("EXISTS"), RedisCmdDescribeEntity {
            summary: String::from("Determines whether one or more keys exist."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("existsCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("EXPIRE"), RedisCmdDescribeEntity {
            summary: String::from("Sets the expiration time of a key in seconds."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("expireCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("EXPIREAT"), RedisCmdDescribeEntity {
            summary: String::from("Sets the expiration time of a key to a Unix timestamp."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.2.0"),
            arity: -3,
            function: Some(String::from("expireatCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("EXPIRETIME"), RedisCmdDescribeEntity {
            summary: String::from("Returns the expiration time of a key as a Unix timestamp."),
            container: None,
            group: String::from("generic"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("expiretimeCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("FAILOVER"), RedisCmdDescribeEntity {
            summary: String::from("Starts a coordinated failover from a server to one of its replicas."),
            container: None,
            group: String::from("server"),
            since: String::from("6.2.0"),
            arity: -1,
            function: Some(String::from("failoverCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("FCALL"), RedisCmdDescribeEntity {
            summary: String::from("Invokes a function."),
            container: None,
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("fcallCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("SKIP_MONITOR"),String::from("MAY_REPLICATE"),String::from("NO_MANDATORY_KEYS"),String::from("STALE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("FCALL_RO"), RedisCmdDescribeEntity {
            summary: String::from("Invokes a read-only function."),
            container: None,
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("fcallroCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("SKIP_MONITOR"),String::from("NO_MANDATORY_KEYS"),String::from("STALE"),String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("FLUSHALL"), RedisCmdDescribeEntity {
            summary: String::from("Removes all keys from all databases."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: -1,
            function: Some(String::from("flushallCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: None,
        }),
        (String::from("FLUSHDB"), RedisCmdDescribeEntity {
            summary: String::from("Remove all keys from the current database."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: -1,
            function: Some(String::from("flushdbCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION"), RedisCmdDescribeEntity {
            summary: String::from("A container for function commands."),
            container: None,
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("FUNCTION DELETE"), RedisCmdDescribeEntity {
            summary: String::from("Deletes a library and its functions."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: 3,
            function: Some(String::from("functionDeleteCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("WRITE"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION DUMP"), RedisCmdDescribeEntity {
            summary: String::from("Dumps all libraries into a serialized binary payload."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("functionDumpCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION FLUSH"), RedisCmdDescribeEntity {
            summary: String::from("Deletes all libraries and functions."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("functionFlushCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("WRITE"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("functionHelpCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION KILL"), RedisCmdDescribeEntity {
            summary: String::from("Terminates a function during execution."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("functionKillCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION LIST"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about all libraries."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("functionListCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION LOAD"), RedisCmdDescribeEntity {
            summary: String::from("Creates a library."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("functionLoadCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION RESTORE"), RedisCmdDescribeEntity {
            summary: String::from("Restores all libraries from a payload."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("functionRestoreCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: None,
        }),
        (String::from("FUNCTION STATS"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about a function during execution."),
            container: Some(String::from("FUNCTION")),
            group: String::from("scripting"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("functionStatsCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("GEOADD"), RedisCmdDescribeEntity {
            summary: String::from("Adds one or more members to a geospatial index. The key is created if it doesn't exist."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.0"),
            arity: -5,
            function: Some(String::from("geoaddCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEODIST"), RedisCmdDescribeEntity {
            summary: String::from("Returns the distance between two members of a geospatial index."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.0"),
            arity: -4,
            function: Some(String::from("geodistCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEOHASH"), RedisCmdDescribeEntity {
            summary: String::from("Returns members from a geospatial index as geohash strings."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.0"),
            arity: -2,
            function: Some(String::from("geohashCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEOPOS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the longitude and latitude of members from a geospatial index."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.0"),
            arity: -2,
            function: Some(String::from("geoposCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEORADIUS"), RedisCmdDescribeEntity {
            summary: String::from("Queries a geospatial index for members within a distance from a coordinate, optionally stores the result."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.0"),
            arity: -6,
            function: Some(String::from("georadiusCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: None, keyword: Some(Keyword{keyword: String::from("STORE"), startfrom: 6}),},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: None, keyword: Some(Keyword{keyword: String::from("STOREDIST"), startfrom: 6}),},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEORADIUSBYMEMBER"), RedisCmdDescribeEntity {
            summary: String::from("Queries a geospatial index for members within a distance from a member, optionally stores the result."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.0"),
            arity: -5,
            function: Some(String::from("georadiusbymemberCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: None, keyword: Some(Keyword{keyword: String::from("STORE"), startfrom: 5}),},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: None, keyword: Some(Keyword{keyword: String::from("STOREDIST"), startfrom: 5}),},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEORADIUSBYMEMBER_RO"), RedisCmdDescribeEntity {
            summary: String::from("Returns members from a geospatial index that are within a distance from a member."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.10"),
            arity: -5,
            function: Some(String::from("georadiusbymemberroCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEORADIUS_RO"), RedisCmdDescribeEntity {
            summary: String::from("Returns members from a geospatial index that are within a distance from a coordinate."),
            container: None,
            group: String::from("geo"),
            since: String::from("3.2.10"),
            arity: -6,
            function: Some(String::from("georadiusroCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEOSEARCH"), RedisCmdDescribeEntity {
            summary: String::from("Queries a geospatial index for members inside an area of a box or a circle."),
            container: None,
            group: String::from("geo"),
            since: String::from("6.2.0"),
            arity: -7,
            function: Some(String::from("geosearchCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GEOSEARCHSTORE"), RedisCmdDescribeEntity {
            summary: String::from("Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result."),
            container: None,
            group: String::from("geo"),
            since: String::from("6.2.0"),
            arity: -8,
            function: Some(String::from("geosearchstoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GET"), RedisCmdDescribeEntity {
            summary: String::from("Returns the string value of a key."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("getCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GETBIT"), RedisCmdDescribeEntity {
            summary: String::from("Returns a bit value by offset."),
            container: None,
            group: String::from("bitmap"),
            since: String::from("2.2.0"),
            arity: 3,
            function: Some(String::from("getbitCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GETDEL"), RedisCmdDescribeEntity {
            summary: String::from("Returns the string value of a key after deleting the key."),
            container: None,
            group: String::from("string"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("getdelCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GETEX"), RedisCmdDescribeEntity {
            summary: String::from("Returns the string value of a key after setting its expiration time."),
            container: None,
            group: String::from("string"),
            since: String::from("6.2.0"),
            arity: -2,
            function: Some(String::from("getexCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GETRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Returns a substring of the string stored at a key."),
            container: None,
            group: String::from("string"),
            since: String::from("2.4.0"),
            arity: 4,
            function: Some(String::from("getrangeCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("GETSET"), RedisCmdDescribeEntity {
            summary: String::from("Returns the previous string value of a key after setting it to a new value."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("getsetCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HDEL"), RedisCmdDescribeEntity {
            summary: String::from("Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: -3,
            function: Some(String::from("hdelCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HELLO"), RedisCmdDescribeEntity {
            summary: String::from("Handshakes with the Redis server."),
            container: None,
            group: String::from("connection"),
            since: String::from("6.0.0"),
            arity: -1,
            function: Some(String::from("helloCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("NO_AUTH"),String::from("SENTINEL"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("HEXISTS"), RedisCmdDescribeEntity {
            summary: String::from("Determines whether a field exists in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 3,
            function: Some(String::from("hexistsCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HGET"), RedisCmdDescribeEntity {
            summary: String::from("Returns the value of a field in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 3,
            function: Some(String::from("hgetCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HGETALL"), RedisCmdDescribeEntity {
            summary: String::from("Returns all fields and values in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 2,
            function: Some(String::from("hgetallCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HINCRBY"), RedisCmdDescribeEntity {
            summary: String::from("Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 4,
            function: Some(String::from("hincrbyCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HINCRBYFLOAT"), RedisCmdDescribeEntity {
            summary: String::from("Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.6.0"),
            arity: 4,
            function: Some(String::from("hincrbyfloatCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HKEYS"), RedisCmdDescribeEntity {
            summary: String::from("Returns all fields in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 2,
            function: Some(String::from("hkeysCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HLEN"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of fields in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 2,
            function: Some(String::from("hlenCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HMGET"), RedisCmdDescribeEntity {
            summary: String::from("Returns the values of all fields in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: -3,
            function: Some(String::from("hmgetCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HMSET"), RedisCmdDescribeEntity {
            summary: String::from("Sets the values of multiple fields."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: -4,
            function: Some(String::from("hsetCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HRANDFIELD"), RedisCmdDescribeEntity {
            summary: String::from("Returns one or more random fields from a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("6.2.0"),
            arity: -2,
            function: Some(String::from("hrandfieldCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HSCAN"), RedisCmdDescribeEntity {
            summary: String::from("Iterates over fields and values of a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.8.0"),
            arity: -3,
            function: Some(String::from("hscanCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HSET"), RedisCmdDescribeEntity {
            summary: String::from("Creates or modifies the value of a field in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: -4,
            function: Some(String::from("hsetCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HSETNX"), RedisCmdDescribeEntity {
            summary: String::from("Sets the value of a field in a hash only when the field doesn't exist."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 4,
            function: Some(String::from("hsetnxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HSTRLEN"), RedisCmdDescribeEntity {
            summary: String::from("Returns the length of the value of a field."),
            container: None,
            group: String::from("hash"),
            since: String::from("3.2.0"),
            arity: 3,
            function: Some(String::from("hstrlenCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("HVALS"), RedisCmdDescribeEntity {
            summary: String::from("Returns all values in a hash."),
            container: None,
            group: String::from("hash"),
            since: String::from("2.0.0"),
            arity: 2,
            function: Some(String::from("hvalsCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("INCR"), RedisCmdDescribeEntity {
            summary: String::from("Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("incrCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("INCRBY"), RedisCmdDescribeEntity {
            summary: String::from("Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("incrbyCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("INCRBYFLOAT"), RedisCmdDescribeEntity {
            summary: String::from("Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("2.6.0"),
            arity: 3,
            function: Some(String::from("incrbyfloatCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("INFO"), RedisCmdDescribeEntity {
            summary: String::from("Returns information and statistics about the server."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: -1,
            function: Some(String::from("infoCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("KEYS"), RedisCmdDescribeEntity {
            summary: String::from("Returns all key names that match a pattern."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("keysCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: None,
        }),
        (String::from("LASTSAVE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the Unix timestamp of the last successful save to disk."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: 1,
            function: Some(String::from("lastsaveCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("LATENCY"), RedisCmdDescribeEntity {
            summary: String::from("A container for latency diagnostics commands."),
            container: None,
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("LATENCY DOCTOR"), RedisCmdDescribeEntity {
            summary: String::from("Returns a human-readable latency analysis report."),
            container: Some(String::from("LATENCY")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: 2,
            function: Some(String::from("latencyCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("LATENCY GRAPH"), RedisCmdDescribeEntity {
            summary: String::from("Returns a latency graph for an event."),
            container: Some(String::from("LATENCY")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: 3,
            function: Some(String::from("latencyCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("LATENCY HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("LATENCY")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: 2,
            function: Some(String::from("latencyCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("LATENCY HISTOGRAM"), RedisCmdDescribeEntity {
            summary: String::from("Returns the cumulative distribution of latencies of a subset or all commands."),
            container: Some(String::from("LATENCY")),
            group: String::from("server"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("latencyCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("LATENCY HISTORY"), RedisCmdDescribeEntity {
            summary: String::from("Returns timestamp-latency samples for an event."),
            container: Some(String::from("LATENCY")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: 3,
            function: Some(String::from("latencyCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("LATENCY LATEST"), RedisCmdDescribeEntity {
            summary: String::from("Returns the latest latency samples for all events."),
            container: Some(String::from("LATENCY")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: 2,
            function: Some(String::from("latencyCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("LATENCY RESET"), RedisCmdDescribeEntity {
            summary: String::from("Resets the latency data for one or more events."),
            container: Some(String::from("LATENCY")),
            group: String::from("server"),
            since: String::from("2.8.13"),
            arity: -2,
            function: Some(String::from("latencyCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("LCS"), RedisCmdDescribeEntity {
            summary: String::from("Finds the longest common substring."),
            container: None,
            group: String::from("string"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("lcsCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LINDEX"), RedisCmdDescribeEntity {
            summary: String::from("Returns an element from a list by its index."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("lindexCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LINSERT"), RedisCmdDescribeEntity {
            summary: String::from("Inserts an element before or after another element in a list."),
            container: None,
            group: String::from("list"),
            since: String::from("2.2.0"),
            arity: 5,
            function: Some(String::from("linsertCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LLEN"), RedisCmdDescribeEntity {
            summary: String::from("Returns the length of a list."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("llenCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LMOVE"), RedisCmdDescribeEntity {
            summary: String::from("Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved."),
            container: None,
            group: String::from("list"),
            since: String::from("6.2.0"),
            arity: 5,
            function: Some(String::from("lmoveCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LMPOP"), RedisCmdDescribeEntity {
            summary: String::from("Returns multiple elements from a list after removing them. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("7.0.0"),
            arity: -4,
            function: Some(String::from("lmpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("LOLWUT"), RedisCmdDescribeEntity {
            summary: String::from("Displays computer art and the Redis version"),
            container: None,
            group: String::from("server"),
            since: String::from("5.0.0"),
            arity: -1,
            function: Some(String::from("lolwutCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("LPOP"), RedisCmdDescribeEntity {
            summary: String::from("Returns the first elements in a list after removing it. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("lpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LPOS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the index of matching elements in a list."),
            container: None,
            group: String::from("list"),
            since: String::from("6.0.6"),
            arity: -3,
            function: Some(String::from("lposCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LPUSH"), RedisCmdDescribeEntity {
            summary: String::from("Prepends one or more elements to a list. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("lpushCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LPUSHX"), RedisCmdDescribeEntity {
            summary: String::from("Prepends one or more elements to a list only when the list exists."),
            container: None,
            group: String::from("list"),
            since: String::from("2.2.0"),
            arity: -3,
            function: Some(String::from("lpushxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Returns a range of elements from a list."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: 4,
            function: Some(String::from("lrangeCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LREM"), RedisCmdDescribeEntity {
            summary: String::from("Removes elements from a list. Deletes the list if the last element was removed."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: 4,
            function: Some(String::from("lremCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LSET"), RedisCmdDescribeEntity {
            summary: String::from("Sets the value of an element in a list by its index."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: 4,
            function: Some(String::from("lsetCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("LTRIM"), RedisCmdDescribeEntity {
            summary: String::from("Removes elements from both ends a list. Deletes the list if all elements were trimmed."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: 4,
            function: Some(String::from("ltrimCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("MEMORY"), RedisCmdDescribeEntity {
            summary: String::from("A container for memory diagnostics commands."),
            container: None,
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("MEMORY DOCTOR"), RedisCmdDescribeEntity {
            summary: String::from("Outputs a memory problems report."),
            container: Some(String::from("MEMORY")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 2,
            function: Some(String::from("memoryCommand")),
            command_flags: None,
            key_specs: None,
        }),
        (String::from("MEMORY HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("MEMORY")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 2,
            function: Some(String::from("memoryCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("MEMORY MALLOC-STATS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the allocator statistics."),
            container: Some(String::from("MEMORY")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 2,
            function: Some(String::from("memoryCommand")),
            command_flags: None,
            key_specs: None,
        }),
        (String::from("MEMORY PURGE"), RedisCmdDescribeEntity {
            summary: String::from("Asks the allocator to release memory."),
            container: Some(String::from("MEMORY")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 2,
            function: Some(String::from("memoryCommand")),
            command_flags: None,
            key_specs: None,
        }),
        (String::from("MEMORY STATS"), RedisCmdDescribeEntity {
            summary: String::from("Returns details about memory usage."),
            container: Some(String::from("MEMORY")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 2,
            function: Some(String::from("memoryCommand")),
            command_flags: None,
            key_specs: None,
        }),
        (String::from("MEMORY USAGE"), RedisCmdDescribeEntity {
            summary: String::from("Estimates the memory usage of a key."),
            container: Some(String::from("MEMORY")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: -3,
            function: Some(String::from("memoryCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("MGET"), RedisCmdDescribeEntity {
            summary: String::from("Atomically returns the string values of one or more keys."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("mgetCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("MIGRATE"), RedisCmdDescribeEntity {
            summary: String::from("Atomically transfers a key from one Redis instance to another."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.6.0"),
            arity: -6,
            function: Some(String::from("migrateCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 3}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),String::from("INCOMPLETE"),],
                    begin_search: BeginSearch{index: None, keyword: Some(Keyword{keyword: String::from("KEYS"), startfrom: -2}),},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("MODULE"), RedisCmdDescribeEntity {
            summary: String::from("A container for module commands."),
            container: None,
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("MODULE HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("MODULE")),
            group: String::from("server"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("moduleCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("MODULE LIST"), RedisCmdDescribeEntity {
            summary: String::from("Returns all loaded modules."),
            container: Some(String::from("MODULE")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 2,
            function: Some(String::from("moduleCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("MODULE LOAD"), RedisCmdDescribeEntity {
            summary: String::from("Loads a module."),
            container: Some(String::from("MODULE")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: -3,
            function: Some(String::from("moduleCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),String::from("PROTECTED"),]),
            key_specs: None,
        }),
        (String::from("MODULE LOADEX"), RedisCmdDescribeEntity {
            summary: String::from("Loads a module using extended parameters."),
            container: Some(String::from("MODULE")),
            group: String::from("server"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("moduleCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),String::from("PROTECTED"),]),
            key_specs: None,
        }),
        (String::from("MODULE UNLOAD"), RedisCmdDescribeEntity {
            summary: String::from("Unloads a module."),
            container: Some(String::from("MODULE")),
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 3,
            function: Some(String::from("moduleCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),String::from("PROTECTED"),]),
            key_specs: None,
        }),
        (String::from("MONITOR"), RedisCmdDescribeEntity {
            summary: String::from("Listens for all requests received by the server in real-time."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: 1,
            function: Some(String::from("monitorCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("MOVE"), RedisCmdDescribeEntity {
            summary: String::from("Moves a key to another database."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("moveCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("MSET"), RedisCmdDescribeEntity {
            summary: String::from("Atomically creates or modifies the string values of one or more keys."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.1"),
            arity: -3,
            function: Some(String::from("msetCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 2, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("MSETNX"), RedisCmdDescribeEntity {
            summary: String::from("Atomically modifies the string values of one or more keys only when all keys don't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.1"),
            arity: -3,
            function: Some(String::from("msetnxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 2, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("MULTI"), RedisCmdDescribeEntity {
            summary: String::from("Starts a transaction."),
            container: None,
            group: String::from("transactions"),
            since: String::from("1.2.0"),
            arity: 1,
            function: Some(String::from("multiCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("OBJECT"), RedisCmdDescribeEntity {
            summary: String::from("A container for object introspection commands."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.2.3"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("OBJECT ENCODING"), RedisCmdDescribeEntity {
            summary: String::from("Returns the internal encoding of a Redis object."),
            container: Some(String::from("OBJECT")),
            group: String::from("generic"),
            since: String::from("2.2.3"),
            arity: 3,
            function: Some(String::from("objectCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("OBJECT FREQ"), RedisCmdDescribeEntity {
            summary: String::from("Returns the logarithmic access frequency counter of a Redis object."),
            container: Some(String::from("OBJECT")),
            group: String::from("generic"),
            since: String::from("4.0.0"),
            arity: 3,
            function: Some(String::from("objectCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("OBJECT HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("OBJECT")),
            group: String::from("generic"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("objectCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("OBJECT IDLETIME"), RedisCmdDescribeEntity {
            summary: String::from("Returns the time since the last access to a Redis object."),
            container: Some(String::from("OBJECT")),
            group: String::from("generic"),
            since: String::from("2.2.3"),
            arity: 3,
            function: Some(String::from("objectCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("OBJECT REFCOUNT"), RedisCmdDescribeEntity {
            summary: String::from("Returns the reference count of a value of a key."),
            container: Some(String::from("OBJECT")),
            group: String::from("generic"),
            since: String::from("2.2.3"),
            arity: 3,
            function: Some(String::from("objectCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PERSIST"), RedisCmdDescribeEntity {
            summary: String::from("Removes the expiration time of a key."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.2.0"),
            arity: 2,
            function: Some(String::from("persistCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PEXPIRE"), RedisCmdDescribeEntity {
            summary: String::from("Sets the expiration time of a key in milliseconds."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.6.0"),
            arity: -3,
            function: Some(String::from("pexpireCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PEXPIREAT"), RedisCmdDescribeEntity {
            summary: String::from("Sets the expiration time of a key to a Unix milliseconds timestamp."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.6.0"),
            arity: -3,
            function: Some(String::from("pexpireatCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PEXPIRETIME"), RedisCmdDescribeEntity {
            summary: String::from("Returns the expiration time of a key as a Unix milliseconds timestamp."),
            container: None,
            group: String::from("generic"),
            since: String::from("7.0.0"),
            arity: 2,
            function: Some(String::from("pexpiretimeCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PFADD"), RedisCmdDescribeEntity {
            summary: String::from("Adds elements to a HyperLogLog key. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("hyperloglog"),
            since: String::from("2.8.9"),
            arity: -2,
            function: Some(String::from("pfaddCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PFCOUNT"), RedisCmdDescribeEntity {
            summary: String::from("Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s)."),
            container: None,
            group: String::from("hyperloglog"),
            since: String::from("2.8.9"),
            arity: -2,
            function: Some(String::from("pfcountCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("MAY_REPLICATE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PFDEBUG"), RedisCmdDescribeEntity {
            summary: String::from("Internal commands for debugging HyperLogLog values."),
            container: None,
            group: String::from("hyperloglog"),
            since: String::from("2.8.9"),
            arity: 3,
            function: Some(String::from("pfdebugCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("ADMIN"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PFMERGE"), RedisCmdDescribeEntity {
            summary: String::from("Merges one or more HyperLogLog values into a single key."),
            container: None,
            group: String::from("hyperloglog"),
            since: String::from("2.8.9"),
            arity: -2,
            function: Some(String::from("pfmergeCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PFSELFTEST"), RedisCmdDescribeEntity {
            summary: String::from("An internal command for testing HyperLogLog values."),
            container: None,
            group: String::from("hyperloglog"),
            since: String::from("2.8.9"),
            arity: 1,
            function: Some(String::from("pfselftestCommand")),
            command_flags: Some(vec![String::from("ADMIN"),]),
            key_specs: None,
        }),
        (String::from("PING"), RedisCmdDescribeEntity {
            summary: String::from("Returns the server's liveliness response."),
            container: None,
            group: String::from("connection"),
            since: String::from("1.0.0"),
            arity: -1,
            function: Some(String::from("pingCommand")),
            command_flags: Some(vec![String::from("FAST"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("PSETEX"), RedisCmdDescribeEntity {
            summary: String::from("Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("2.6.0"),
            arity: 4,
            function: Some(String::from("psetexCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PSUBSCRIBE"), RedisCmdDescribeEntity {
            summary: String::from("Listens for messages published to channels that match one or more patterns."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("2.0.0"),
            arity: -2,
            function: Some(String::from("psubscribeCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("PSYNC"), RedisCmdDescribeEntity {
            summary: String::from("An internal command used in replication."),
            container: None,
            group: String::from("server"),
            since: String::from("2.8.0"),
            arity: -3,
            function: Some(String::from("syncCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NO_MULTI"),String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("PTTL"), RedisCmdDescribeEntity {
            summary: String::from("Returns the expiration time in milliseconds of a key."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.6.0"),
            arity: 2,
            function: Some(String::from("pttlCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("PUBLISH"), RedisCmdDescribeEntity {
            summary: String::from("Posts a message to a channel."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("2.0.0"),
            arity: 3,
            function: Some(String::from("publishCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("MAY_REPLICATE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("PUBSUB"), RedisCmdDescribeEntity {
            summary: String::from("A container for Pub/Sub commands."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("2.8.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("PUBSUB CHANNELS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the active channels."),
            container: Some(String::from("PUBSUB")),
            group: String::from("pubsub"),
            since: String::from("2.8.0"),
            arity: -2,
            function: Some(String::from("pubsubCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("PUBSUB HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("PUBSUB")),
            group: String::from("pubsub"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("pubsubCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("PUBSUB NUMPAT"), RedisCmdDescribeEntity {
            summary: String::from("Returns a count of unique pattern subscriptions."),
            container: Some(String::from("PUBSUB")),
            group: String::from("pubsub"),
            since: String::from("2.8.0"),
            arity: 2,
            function: Some(String::from("pubsubCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("PUBSUB NUMSUB"), RedisCmdDescribeEntity {
            summary: String::from("Returns a count of subscribers to channels."),
            container: Some(String::from("PUBSUB")),
            group: String::from("pubsub"),
            since: String::from("2.8.0"),
            arity: -2,
            function: Some(String::from("pubsubCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("PUBSUB SHARDCHANNELS"), RedisCmdDescribeEntity {
            summary: String::from("Returns the active shard channels."),
            container: Some(String::from("PUBSUB")),
            group: String::from("pubsub"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("pubsubCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("PUBSUB SHARDNUMSUB"), RedisCmdDescribeEntity {
            summary: String::from("Returns the count of subscribers of shard channels."),
            container: Some(String::from("PUBSUB")),
            group: String::from("pubsub"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("pubsubCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("PUNSUBSCRIBE"), RedisCmdDescribeEntity {
            summary: String::from("Stops listening to messages published to channels that match one or more patterns."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("2.0.0"),
            arity: -1,
            function: Some(String::from("punsubscribeCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("QUIT"), RedisCmdDescribeEntity {
            summary: String::from("Closes the connection."),
            container: None,
            group: String::from("connection"),
            since: String::from("1.0.0"),
            arity: -1,
            function: Some(String::from("quitCommand")),
            command_flags: Some(vec![String::from("ALLOW_BUSY"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("NO_AUTH"),]),
            key_specs: None,
        }),
        (String::from("RANDOMKEY"), RedisCmdDescribeEntity {
            summary: String::from("Returns a random key name from the database."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: 1,
            function: Some(String::from("randomkeyCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("TOUCHES_ARBITRARY_KEYS"),]),
            key_specs: None,
        }),
        (String::from("READONLY"), RedisCmdDescribeEntity {
            summary: String::from("Enables read-only queries for a connection to a Redis Cluster replica node."),
            container: None,
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 1,
            function: Some(String::from("readonlyCommand")),
            command_flags: Some(vec![String::from("FAST"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("READWRITE"), RedisCmdDescribeEntity {
            summary: String::from("Enables read-write queries for a connection to a Reids Cluster replica node."),
            container: None,
            group: String::from("cluster"),
            since: String::from("3.0.0"),
            arity: 1,
            function: Some(String::from("readwriteCommand")),
            command_flags: Some(vec![String::from("FAST"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("RENAME"), RedisCmdDescribeEntity {
            summary: String::from("Renames a key and overwrites the destination."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("renameCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("RENAMENX"), RedisCmdDescribeEntity {
            summary: String::from("Renames a key only when the target key name doesn't exist."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("renamenxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("REPLCONF"), RedisCmdDescribeEntity {
            summary: String::from("An internal command for configuring the replication stream."),
            container: None,
            group: String::from("server"),
            since: String::from("3.0.0"),
            arity: -1,
            function: Some(String::from("replconfCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("REPLICAOF"), RedisCmdDescribeEntity {
            summary: String::from("Configures a server as replica of another, or promotes it to a master."),
            container: None,
            group: String::from("server"),
            since: String::from("5.0.0"),
            arity: 3,
            function: Some(String::from("replicaofCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("RESET"), RedisCmdDescribeEntity {
            summary: String::from("Resets the connection."),
            container: None,
            group: String::from("connection"),
            since: String::from("6.2.0"),
            arity: 1,
            function: Some(String::from("resetCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("NO_AUTH"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("RESTORE"), RedisCmdDescribeEntity {
            summary: String::from("Creates a key from the serialized representation of a value."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.6.0"),
            arity: -4,
            function: Some(String::from("restoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("RESTORE-ASKING"), RedisCmdDescribeEntity {
            summary: String::from("An internal command for migrating keys in a cluster."),
            container: None,
            group: String::from("server"),
            since: String::from("3.0.0"),
            arity: -4,
            function: Some(String::from("restoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("ASKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ROLE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the replication role."),
            container: None,
            group: String::from("server"),
            since: String::from("2.8.12"),
            arity: 1,
            function: Some(String::from("roleCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("RPOP"), RedisCmdDescribeEntity {
            summary: String::from("Returns and removes the last elements of a list. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("rpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("RPOPLPUSH"), RedisCmdDescribeEntity {
            summary: String::from("Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped."),
            container: None,
            group: String::from("list"),
            since: String::from("1.2.0"),
            arity: 3,
            function: Some(String::from("rpoplpushCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("RPUSH"), RedisCmdDescribeEntity {
            summary: String::from("Appends one or more elements to a list. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("list"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("rpushCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("RPUSHX"), RedisCmdDescribeEntity {
            summary: String::from("Appends an element to a list only when the list exists."),
            container: None,
            group: String::from("list"),
            since: String::from("2.2.0"),
            arity: -3,
            function: Some(String::from("rpushxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SADD"), RedisCmdDescribeEntity {
            summary: String::from("Adds one or more members to a set. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("saddCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SAVE"), RedisCmdDescribeEntity {
            summary: String::from("Synchronously saves the database(s) to disk."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: 1,
            function: Some(String::from("saveCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),String::from("NO_MULTI"),]),
            key_specs: None,
        }),
        (String::from("SCAN"), RedisCmdDescribeEntity {
            summary: String::from("Iterates over the key names in the database."),
            container: None,
            group: String::from("generic"),
            since: String::from("2.8.0"),
            arity: -2,
            function: Some(String::from("scanCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("TOUCHES_ARBITRARY_KEYS"),]),
            key_specs: None,
        }),
        (String::from("SCARD"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of members in a set."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("scardCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SCRIPT"), RedisCmdDescribeEntity {
            summary: String::from("A container for Lua scripts management commands."),
            container: None,
            group: String::from("scripting"),
            since: String::from("2.6.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("SCRIPT DEBUG"), RedisCmdDescribeEntity {
            summary: String::from("Sets the debug mode of server-side Lua scripts."),
            container: Some(String::from("SCRIPT")),
            group: String::from("scripting"),
            since: String::from("3.2.0"),
            arity: 3,
            function: Some(String::from("scriptCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("SCRIPT EXISTS"), RedisCmdDescribeEntity {
            summary: String::from("Determines whether server-side Lua scripts exist in the script cache."),
            container: Some(String::from("SCRIPT")),
            group: String::from("scripting"),
            since: String::from("2.6.0"),
            arity: -3,
            function: Some(String::from("scriptCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("SCRIPT FLUSH"), RedisCmdDescribeEntity {
            summary: String::from("Removes all server-side Lua scripts from the script cache."),
            container: Some(String::from("SCRIPT")),
            group: String::from("scripting"),
            since: String::from("2.6.0"),
            arity: -2,
            function: Some(String::from("scriptCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("SCRIPT HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("SCRIPT")),
            group: String::from("scripting"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("scriptCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("SCRIPT KILL"), RedisCmdDescribeEntity {
            summary: String::from("Terminates a server-side Lua script during execution."),
            container: Some(String::from("SCRIPT")),
            group: String::from("scripting"),
            since: String::from("2.6.0"),
            arity: 2,
            function: Some(String::from("scriptCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("SCRIPT LOAD"), RedisCmdDescribeEntity {
            summary: String::from("Loads a server-side Lua script to the script cache."),
            container: Some(String::from("SCRIPT")),
            group: String::from("scripting"),
            since: String::from("2.6.0"),
            arity: 3,
            function: Some(String::from("scriptCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("SDIFF"), RedisCmdDescribeEntity {
            summary: String::from("Returns the difference of multiple sets."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("sdiffCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SDIFFSTORE"), RedisCmdDescribeEntity {
            summary: String::from("Stores the difference of multiple sets in a key."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("sdiffstoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SELECT"), RedisCmdDescribeEntity {
            summary: String::from("Changes the selected database."),
            container: None,
            group: String::from("connection"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("selectCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL"), RedisCmdDescribeEntity {
            summary: String::from("A container for Redis Sentinel commands."),
            container: None,
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: -2,
            function: None,
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL CKQUORUM"), RedisCmdDescribeEntity {
            summary: String::from("Checks for a Redis Sentinel quorum."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL CONFIG"), RedisCmdDescribeEntity {
            summary: String::from("Configures Redis Sentinel."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("6.2.0"),
            arity: -4,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL DEBUG"), RedisCmdDescribeEntity {
            summary: String::from("Lists or updates the current configurable parameters of Redis Sentinel."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL FAILOVER"), RedisCmdDescribeEntity {
            summary: String::from("Forces a Redis Sentinel failover."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL FLUSHCONFIG"), RedisCmdDescribeEntity {
            summary: String::from("Rewrites the Redis Sentinel configuration file."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 2,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL GET-MASTER-ADDR-BY-NAME"), RedisCmdDescribeEntity {
            summary: String::from("Returns the port and address of a master Redis instance."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL INFO-CACHE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the cached `INFO` replies from the deployment's instances."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("3.2.0"),
            arity: -3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL IS-MASTER-DOWN-BY-ADDR"), RedisCmdDescribeEntity {
            summary: String::from("Determines whether a master Redis instance is down."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 6,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL MASTER"), RedisCmdDescribeEntity {
            summary: String::from("Returns the state of a master Redis instance."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL MASTERS"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of monitored Redis masters."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 2,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL MONITOR"), RedisCmdDescribeEntity {
            summary: String::from("Starts monitoring."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 6,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL MYID"), RedisCmdDescribeEntity {
            summary: String::from("Returns the Redis Sentinel instance ID."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL PENDING-SCRIPTS"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about pending scripts for Redis Sentinel."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 2,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL REMOVE"), RedisCmdDescribeEntity {
            summary: String::from("Stops monitoring."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL REPLICAS"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of the monitored Redis replicas."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("5.0.0"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL RESET"), RedisCmdDescribeEntity {
            summary: String::from("Resets Redis masters by name matching a pattern."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL SENTINELS"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of Sentinel instances."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL SET"), RedisCmdDescribeEntity {
            summary: String::from("Changes the configuration of a monitored Redis master."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.4"),
            arity: -5,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL SIMULATE-FAILURE"), RedisCmdDescribeEntity {
            summary: String::from("Simulates failover scenarios."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("3.2.0"),
            arity: -3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SENTINEL SLAVES"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of the monitored replicas."),
            container: Some(String::from("SENTINEL")),
            group: String::from("sentinel"),
            since: String::from("2.8.0"),
            arity: 3,
            function: Some(String::from("sentinelCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("SENTINEL"),String::from("ONLY_SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SET"), RedisCmdDescribeEntity {
            summary: String::from("Sets the string value of a key, ignoring its type. The key is created if it doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("setCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),String::from("VARIABLE_FLAGS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SETBIT"), RedisCmdDescribeEntity {
            summary: String::from("Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("bitmap"),
            since: String::from("2.2.0"),
            arity: 4,
            function: Some(String::from("setbitCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SETEX"), RedisCmdDescribeEntity {
            summary: String::from("Sets the string value and expiration time of a key. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("2.0.0"),
            arity: 4,
            function: Some(String::from("setexCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SETNX"), RedisCmdDescribeEntity {
            summary: String::from("Set the string value of a key only when the key doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("setnxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SETRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("string"),
            since: String::from("2.2.0"),
            arity: 4,
            function: Some(String::from("setrangeCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SHUTDOWN"), RedisCmdDescribeEntity {
            summary: String::from("Synchronously saves the database(s) to disk and shuts down the Redis server."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: -1,
            function: Some(String::from("shutdownCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("NO_MULTI"),String::from("SENTINEL"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("SINTER"), RedisCmdDescribeEntity {
            summary: String::from("Returns the intersect of multiple sets."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("sinterCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SINTERCARD"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of members of the intersect of multiple sets."),
            container: None,
            group: String::from("set"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("sinterCardCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("SINTERSTORE"), RedisCmdDescribeEntity {
            summary: String::from("Stores the intersect of multiple sets in a key."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("sinterstoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SISMEMBER"), RedisCmdDescribeEntity {
            summary: String::from("Determines whether a member belongs to a set."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("sismemberCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SLAVEOF"), RedisCmdDescribeEntity {
            summary: String::from("Sets a Redis server as a replica of another, or promotes it to being a master."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: 3,
            function: Some(String::from("replicaofCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NOSCRIPT"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("SLOWLOG"), RedisCmdDescribeEntity {
            summary: String::from("A container for slow log commands."),
            container: None,
            group: String::from("server"),
            since: String::from("2.2.12"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("SLOWLOG GET"), RedisCmdDescribeEntity {
            summary: String::from("Returns the slow log's entries."),
            container: Some(String::from("SLOWLOG")),
            group: String::from("server"),
            since: String::from("2.2.12"),
            arity: -2,
            function: Some(String::from("slowlogCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("SLOWLOG HELP"), RedisCmdDescribeEntity {
            summary: String::from("Show helpful text about the different subcommands"),
            container: Some(String::from("SLOWLOG")),
            group: String::from("server"),
            since: String::from("6.2.0"),
            arity: 2,
            function: Some(String::from("slowlogCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("SLOWLOG LEN"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of entries in the slow log."),
            container: Some(String::from("SLOWLOG")),
            group: String::from("server"),
            since: String::from("2.2.12"),
            arity: 2,
            function: Some(String::from("slowlogCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("SLOWLOG RESET"), RedisCmdDescribeEntity {
            summary: String::from("Clears all entries from the slow log."),
            container: Some(String::from("SLOWLOG")),
            group: String::from("server"),
            since: String::from("2.2.12"),
            arity: 2,
            function: Some(String::from("slowlogCommand")),
            command_flags: Some(vec![String::from("ADMIN"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("SMEMBERS"), RedisCmdDescribeEntity {
            summary: String::from("Returns all members of a set."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("sinterCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SMISMEMBER"), RedisCmdDescribeEntity {
            summary: String::from("Determines whether multiple members belong to a set."),
            container: None,
            group: String::from("set"),
            since: String::from("6.2.0"),
            arity: -3,
            function: Some(String::from("smismemberCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SMOVE"), RedisCmdDescribeEntity {
            summary: String::from("Moves a member from one set to another."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: 4,
            function: Some(String::from("smoveCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SORT"), RedisCmdDescribeEntity {
            summary: String::from("Sorts the elements in a list, a set, or a sorted set, optionally storing the result."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("sortCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: None, keyword: None,},
                    find_keys: FindKeys{range: None, keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: None, keyword: None,},
                    find_keys: FindKeys{range: None, keynum: None,},
                },
            ]),
        }),
        (String::from("SORT_RO"), RedisCmdDescribeEntity {
            summary: String::from("Returns the sorted elements of a list, a set, or a sorted set."),
            container: None,
            group: String::from("generic"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("sortroCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: None, keyword: None,},
                    find_keys: FindKeys{range: None, keynum: None,},
                },
            ]),
        }),
        (String::from("SPOP"), RedisCmdDescribeEntity {
            summary: String::from("Returns one or more random members from a set after removing them. Deletes the set if the last member was popped."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("spopCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SPUBLISH"), RedisCmdDescribeEntity {
            summary: String::from("Post a message to a shard channel"),
            container: None,
            group: String::from("pubsub"),
            since: String::from("7.0.0"),
            arity: 3,
            function: Some(String::from("spublishCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("MAY_REPLICATE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("NOT_KEY"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SRANDMEMBER"), RedisCmdDescribeEntity {
            summary: String::from("Get one or multiple random members from a set"),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("srandmemberCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SREM"), RedisCmdDescribeEntity {
            summary: String::from("Removes one or more members from a set. Deletes the set if the last member was removed."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("sremCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SSCAN"), RedisCmdDescribeEntity {
            summary: String::from("Iterates over members of a set."),
            container: None,
            group: String::from("set"),
            since: String::from("2.8.0"),
            arity: -3,
            function: Some(String::from("sscanCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SSUBSCRIBE"), RedisCmdDescribeEntity {
            summary: String::from("Listens for messages published to shard channels."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("7.0.0"),
            arity: -2,
            function: Some(String::from("ssubscribeCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("NOT_KEY"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("STRLEN"), RedisCmdDescribeEntity {
            summary: String::from("Returns the length of a string value."),
            container: None,
            group: String::from("string"),
            since: String::from("2.2.0"),
            arity: 2,
            function: Some(String::from("strlenCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SUBSCRIBE"), RedisCmdDescribeEntity {
            summary: String::from("Listens for messages published to channels."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("2.0.0"),
            arity: -2,
            function: Some(String::from("subscribeCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("SUBSTR"), RedisCmdDescribeEntity {
            summary: String::from("Returns a substring from a string value."),
            container: None,
            group: String::from("string"),
            since: String::from("1.0.0"),
            arity: 4,
            function: Some(String::from("getrangeCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SUNION"), RedisCmdDescribeEntity {
            summary: String::from("Returns the union of multiple sets."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -2,
            function: Some(String::from("sunionCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SUNIONSTORE"), RedisCmdDescribeEntity {
            summary: String::from("Stores the union of multiple sets in a key."),
            container: None,
            group: String::from("set"),
            since: String::from("1.0.0"),
            arity: -3,
            function: Some(String::from("sunionstoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SUNSUBSCRIBE"), RedisCmdDescribeEntity {
            summary: String::from("Stops listening to messages posted to shard channels."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("7.0.0"),
            arity: -1,
            function: Some(String::from("sunsubscribeCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("NOT_KEY"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("SWAPDB"), RedisCmdDescribeEntity {
            summary: String::from("Swaps two Redis databases."),
            container: None,
            group: String::from("server"),
            since: String::from("4.0.0"),
            arity: 3,
            function: Some(String::from("swapdbCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("SYNC"), RedisCmdDescribeEntity {
            summary: String::from("An internal command used in replication."),
            container: None,
            group: String::from("server"),
            since: String::from("1.0.0"),
            arity: 1,
            function: Some(String::from("syncCommand")),
            command_flags: Some(vec![String::from("NO_ASYNC_LOADING"),String::from("ADMIN"),String::from("NO_MULTI"),String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("TIME"), RedisCmdDescribeEntity {
            summary: String::from("Returns the server time."),
            container: None,
            group: String::from("server"),
            since: String::from("2.6.0"),
            arity: 1,
            function: Some(String::from("timeCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),String::from("FAST"),]),
            key_specs: None,
        }),
        (String::from("TOUCH"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of existing keys out of those specified after updating the time they were last accessed."),
            container: None,
            group: String::from("generic"),
            since: String::from("3.2.1"),
            arity: -2,
            function: Some(String::from("touchCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("TTL"), RedisCmdDescribeEntity {
            summary: String::from("Returns the expiration time in seconds of a key."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("ttlCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("TYPE"), RedisCmdDescribeEntity {
            summary: String::from("Determines the type of value stored at a key."),
            container: None,
            group: String::from("generic"),
            since: String::from("1.0.0"),
            arity: 2,
            function: Some(String::from("typeCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("UNLINK"), RedisCmdDescribeEntity {
            summary: String::from("Asynchronously deletes one or more keys."),
            container: None,
            group: String::from("generic"),
            since: String::from("4.0.0"),
            arity: -2,
            function: Some(String::from("unlinkCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RM"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("UNSUBSCRIBE"), RedisCmdDescribeEntity {
            summary: String::from("Stops listening to messages posted to channels."),
            container: None,
            group: String::from("pubsub"),
            since: String::from("2.0.0"),
            arity: -1,
            function: Some(String::from("unsubscribeCommand")),
            command_flags: Some(vec![String::from("PUBSUB"),String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("SENTINEL"),]),
            key_specs: None,
        }),
        (String::from("UNWATCH"), RedisCmdDescribeEntity {
            summary: String::from("Forgets about watched keys of a transaction."),
            container: None,
            group: String::from("transactions"),
            since: String::from("2.2.0"),
            arity: 1,
            function: Some(String::from("unwatchCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("ALLOW_BUSY"),]),
            key_specs: None,
        }),
        (String::from("WAIT"), RedisCmdDescribeEntity {
            summary: String::from("Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed."),
            container: None,
            group: String::from("generic"),
            since: String::from("3.0.0"),
            arity: 3,
            function: Some(String::from("waitCommand")),
            command_flags: Some(vec![]),
            key_specs: None,
        }),
        (String::from("WAITAOF"), RedisCmdDescribeEntity {
            summary: String::from("Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas."),
            container: None,
            group: String::from("generic"),
            since: String::from("7.2.0"),
            arity: 4,
            function: Some(String::from("waitaofCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),]),
            key_specs: None,
        }),
        (String::from("WATCH"), RedisCmdDescribeEntity {
            summary: String::from("Monitors changes to keys to determine the execution of a transaction."),
            container: None,
            group: String::from("transactions"),
            since: String::from("2.2.0"),
            arity: -2,
            function: Some(String::from("watchCommand")),
            command_flags: Some(vec![String::from("NOSCRIPT"),String::from("LOADING"),String::from("STALE"),String::from("FAST"),String::from("ALLOW_BUSY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XACK"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of messages that were successfully acknowledged by the consumer group member of a stream."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -4,
            function: Some(String::from("xackCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XADD"), RedisCmdDescribeEntity {
            summary: String::from("Appends a new message to a stream. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -5,
            function: Some(String::from("xaddCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XAUTOCLAIM"), RedisCmdDescribeEntity {
            summary: String::from("Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member."),
            container: None,
            group: String::from("stream"),
            since: String::from("6.2.0"),
            arity: -6,
            function: Some(String::from("xautoclaimCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XCLAIM"), RedisCmdDescribeEntity {
            summary: String::from("Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -6,
            function: Some(String::from("xclaimCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XDEL"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of messages after removing them from a stream."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -3,
            function: Some(String::from("xdelCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XGROUP"), RedisCmdDescribeEntity {
            summary: String::from("A container for consumer groups commands."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("XGROUP CREATE"), RedisCmdDescribeEntity {
            summary: String::from("Creates a consumer group."),
            container: Some(String::from("XGROUP")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -5,
            function: Some(String::from("xgroupCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XGROUP CREATECONSUMER"), RedisCmdDescribeEntity {
            summary: String::from("Creates a consumer in a consumer group."),
            container: Some(String::from("XGROUP")),
            group: String::from("stream"),
            since: String::from("6.2.0"),
            arity: 5,
            function: Some(String::from("xgroupCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("INSERT"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XGROUP DELCONSUMER"), RedisCmdDescribeEntity {
            summary: String::from("Deletes a consumer from a consumer group."),
            container: Some(String::from("XGROUP")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: 5,
            function: Some(String::from("xgroupCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XGROUP DESTROY"), RedisCmdDescribeEntity {
            summary: String::from("Destroys a consumer group."),
            container: Some(String::from("XGROUP")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: 4,
            function: Some(String::from("xgroupCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XGROUP HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("XGROUP")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("xgroupCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("XGROUP SETID"), RedisCmdDescribeEntity {
            summary: String::from("Sets the last-delivered ID of a consumer group."),
            container: Some(String::from("XGROUP")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -5,
            function: Some(String::from("xgroupCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XINFO"), RedisCmdDescribeEntity {
            summary: String::from("A container for stream introspection commands."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -2,
            function: None,
            command_flags: None,
            key_specs: None,
        }),
        (String::from("XINFO CONSUMERS"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of the consumers in a consumer group."),
            container: Some(String::from("XINFO")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: 4,
            function: Some(String::from("xinfoCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XINFO GROUPS"), RedisCmdDescribeEntity {
            summary: String::from("Returns a list of the consumer groups of a stream."),
            container: Some(String::from("XINFO")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: 3,
            function: Some(String::from("xinfoCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XINFO HELP"), RedisCmdDescribeEntity {
            summary: String::from("Returns helpful text about the different subcommands."),
            container: Some(String::from("XINFO")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("xinfoCommand")),
            command_flags: Some(vec![String::from("LOADING"),String::from("STALE"),]),
            key_specs: None,
        }),
        (String::from("XINFO STREAM"), RedisCmdDescribeEntity {
            summary: String::from("Returns information about a stream."),
            container: Some(String::from("XINFO")),
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -3,
            function: Some(String::from("xinfoCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XLEN"), RedisCmdDescribeEntity {
            summary: String::from("Return the number of messages in a stream."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: 2,
            function: Some(String::from("xlenCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XPENDING"), RedisCmdDescribeEntity {
            summary: String::from("Returns the information and entries from a stream consumer group's pending entries list."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -3,
            function: Some(String::from("xpendingCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the messages from a stream within a range of IDs."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -4,
            function: Some(String::from("xrangeCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XREAD"), RedisCmdDescribeEntity {
            summary: String::from("Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -4,
            function: Some(String::from("xreadCommand")),
            command_flags: Some(vec![String::from("BLOCKING"),String::from("READONLY"),String::from("BLOCKING"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: None, keyword: Some(Keyword{keyword: String::from("STREAMS"), startfrom: 1}),},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 2}), keynum: None,},
                },
            ]),
        }),
        (String::from("XREADGROUP"), RedisCmdDescribeEntity {
            summary: String::from("Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -7,
            function: Some(String::from("xreadCommand")),
            command_flags: Some(vec![String::from("BLOCKING"),String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: None, keyword: Some(Keyword{keyword: String::from("STREAMS"), startfrom: 4}),},
                    find_keys: FindKeys{range: Some(Range{lastkey: -1, step: 1, limit: 2}), keynum: None,},
                },
            ]),
        }),
        (String::from("XREVRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the messages from a stream within a range of IDs in reverse order."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -4,
            function: Some(String::from("xrevrangeCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XSETID"), RedisCmdDescribeEntity {
            summary: String::from("An internal command for replicating stream values."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -3,
            function: Some(String::from("xsetidCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("XTRIM"), RedisCmdDescribeEntity {
            summary: String::from("Deletes messages from the beginning of a stream."),
            container: None,
            group: String::from("stream"),
            since: String::from("5.0.0"),
            arity: -4,
            function: Some(String::from("xtrimCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZADD"), RedisCmdDescribeEntity {
            summary: String::from("Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: -4,
            function: Some(String::from("zaddCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZCARD"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of members in a sorted set."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: 2,
            function: Some(String::from("zcardCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZCOUNT"), RedisCmdDescribeEntity {
            summary: String::from("Returns the count of members in a sorted set that have scores within a range."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.0.0"),
            arity: 4,
            function: Some(String::from("zcountCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZDIFF"), RedisCmdDescribeEntity {
            summary: String::from("Returns the difference between multiple sorted sets."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("6.2.0"),
            arity: -3,
            function: Some(String::from("zdiffCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("ZDIFFSTORE"), RedisCmdDescribeEntity {
            summary: String::from("Stores the difference of multiple sorted sets in a key."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("6.2.0"),
            arity: -4,
            function: Some(String::from("zdiffstoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("ZINCRBY"), RedisCmdDescribeEntity {
            summary: String::from("Increments the score of a member in a sorted set."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: 4,
            function: Some(String::from("zincrbyCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZINTER"), RedisCmdDescribeEntity {
            summary: String::from("Returns the intersect of multiple sorted sets."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("6.2.0"),
            arity: -3,
            function: Some(String::from("zinterCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("ZINTERCARD"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of members of the intersect of multiple sorted sets."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("7.0.0"),
            arity: -3,
            function: Some(String::from("zinterCardCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("ZINTERSTORE"), RedisCmdDescribeEntity {
            summary: String::from("Stores the intersect of multiple sorted sets in a key."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.0.0"),
            arity: -4,
            function: Some(String::from("zinterstoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("ZLEXCOUNT"), RedisCmdDescribeEntity {
            summary: String::from("Returns the number of members in a sorted set within a lexicographical range."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.8.9"),
            arity: 4,
            function: Some(String::from("zlexcountCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZMPOP"), RedisCmdDescribeEntity {
            summary: String::from("Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("7.0.0"),
            arity: -4,
            function: Some(String::from("zmpopCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("ZMSCORE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the score of one or more members in a sorted set."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("6.2.0"),
            arity: -3,
            function: Some(String::from("zmscoreCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZPOPMAX"), RedisCmdDescribeEntity {
            summary: String::from("Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("5.0.0"),
            arity: -2,
            function: Some(String::from("zpopmaxCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZPOPMIN"), RedisCmdDescribeEntity {
            summary: String::from("Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("5.0.0"),
            arity: -2,
            function: Some(String::from("zpopminCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("ACCESS"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZRANDMEMBER"), RedisCmdDescribeEntity {
            summary: String::from("Returns one or more random members from a sorted set."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("6.2.0"),
            arity: -2,
            function: Some(String::from("zrandmemberCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Returns members in a sorted set within a range of indexes."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: -4,
            function: Some(String::from("zrangeCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZRANGEBYLEX"), RedisCmdDescribeEntity {
            summary: String::from("Returns members in a sorted set within a lexicographical range."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.8.9"),
            arity: -4,
            function: Some(String::from("zrangebylexCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZRANGEBYSCORE"), RedisCmdDescribeEntity {
            summary: String::from("Returns members in a sorted set within a range of scores."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.0.5"),
            arity: -4,
            function: Some(String::from("zrangebyscoreCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZRANGESTORE"), RedisCmdDescribeEntity {
            summary: String::from("Stores a range of members from sorted set in a key."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("6.2.0"),
            arity: -5,
            function: Some(String::from("zrangestoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZRANK"), RedisCmdDescribeEntity {
            summary: String::from("Returns the index of a member in a sorted set ordered by ascending scores."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.0.0"),
            arity: -3,
            function: Some(String::from("zrankCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREM"), RedisCmdDescribeEntity {
            summary: String::from("Removes one or more members from a sorted set. Deletes the sorted set if all members were removed."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: -3,
            function: Some(String::from("zremCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREMRANGEBYLEX"), RedisCmdDescribeEntity {
            summary: String::from("Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.8.9"),
            arity: 4,
            function: Some(String::from("zremrangebylexCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREMRANGEBYRANK"), RedisCmdDescribeEntity {
            summary: String::from("Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.0.0"),
            arity: 4,
            function: Some(String::from("zremrangebyrankCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREMRANGEBYSCORE"), RedisCmdDescribeEntity {
            summary: String::from("Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: 4,
            function: Some(String::from("zremrangebyscoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RW"),String::from("DELETE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREVRANGE"), RedisCmdDescribeEntity {
            summary: String::from("Returns members in a sorted set within a range of indexes in reverse order."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: -4,
            function: Some(String::from("zrevrangeCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREVRANGEBYLEX"), RedisCmdDescribeEntity {
            summary: String::from("Returns members in a sorted set within a lexicographical range in reverse order."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.8.9"),
            arity: -4,
            function: Some(String::from("zrevrangebylexCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREVRANGEBYSCORE"), RedisCmdDescribeEntity {
            summary: String::from("Returns members in a sorted set within a range of scores in reverse order."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.2.0"),
            arity: -4,
            function: Some(String::from("zrevrangebyscoreCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZREVRANK"), RedisCmdDescribeEntity {
            summary: String::from("Returns the index of a member in a sorted set ordered by descending scores."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.0.0"),
            arity: -3,
            function: Some(String::from("zrevrankCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZSCAN"), RedisCmdDescribeEntity {
            summary: String::from("Iterates over members and scores of a sorted set."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.8.0"),
            arity: -3,
            function: Some(String::from("zscanCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZSCORE"), RedisCmdDescribeEntity {
            summary: String::from("Returns the score of a member in a sorted set."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("1.2.0"),
            arity: 3,
            function: Some(String::from("zscoreCommand")),
            command_flags: Some(vec![String::from("READONLY"),String::from("FAST"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
            ]),
        }),
        (String::from("ZUNION"), RedisCmdDescribeEntity {
            summary: String::from("Returns the union of multiple sorted sets."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("6.2.0"),
            arity: -3,
            function: Some(String::from("zunionCommand")),
            command_flags: Some(vec![String::from("READONLY"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
        (String::from("ZUNIONSTORE"), RedisCmdDescribeEntity {
            summary: String::from("Stores the union of multiple sorted sets in a key."),
            container: None,
            group: String::from("sorted_set"),
            since: String::from("2.0.0"),
            arity: -4,
            function: Some(String::from("zunionstoreCommand")),
            command_flags: Some(vec![String::from("WRITE"),String::from("DENYOOM"),]),
            key_specs: Some(vec![                KeySpecs{
                    flags: vec![String::from("OW"),String::from("UPDATE"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 1}), keyword: None,},
                    find_keys: FindKeys{range: Some(Range{lastkey: 0, step: 1, limit: 0}), keynum: None,},
                },
                KeySpecs{
                    flags: vec![String::from("RO"),String::from("ACCESS"),],
                    begin_search: BeginSearch{index: Some(Index{pos: 2}), keyword: None,},
                    find_keys: FindKeys{range: None, keynum: Some(KeyNum{keynumidx: 0, firstkey: 1, step: 1}),},
                },
            ]),
        }),
    ]);
}
